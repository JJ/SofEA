2012-01-10  Juan J. Merelo Guervós  <jjmerelo@gmail.com>

	* extract-evals.pl: Adapted this old script to extract the number
	of evaluations from the number of deleted + base population. There
	might be a few over that, but I expect it should be pretty much
	the same for all (or a random variable).

	* run-until-found-par.sh: With 2 reproducers and 6 evaluators,
	even better:

	real	9m7.691s
user	6m7.770s
sys	0m31.830s

	If reproducers' packet size is 32, good results too

	real	10m6.620s
user	4m59.210s
sys	0m26.550s

	With 2 eval clients, 1 repro:
	
	real	12m27.632s
user	6m3.410s
sys	0m33.040s

	So we really see a speed up (or rather speed-down)

2012-01-09  Juan J. Merelo Guervós  <jjmerelo@gmail.com>

	* i128-p128-e16-r64.yaml (id): And we eventually hit the jackpot:
	real	10m9.683s
user	6m3.060s
sys	0m31.470s
(repro_pop_size): We were just lucky... packet size for repro was
	16. Let's try with the original, to see what happens.
	(max_evaluations): I really hit the jackpot. With what I _really_
	intended to do, results are

	real	17m10.411s
user	6m35.180s
sys	0m35.960s

	(pretty good, anyways)

	with a single reproducer packet size 16 and 4 evaluation clients. Bingo!
	

	* i128-p128-er16.yaml (id): Best results so far, real improvement:

	2 clients
	real	20m12.599s
user	8m50.880s
sys	0m50.110s

	4 clients
	real	19m6.069s
user	8m31.350s
sys	0m46.620s

	6 clients
	real	17m59.149s
user	8m20.500s
sys	0m43.570s

	Fail for more clients:
	real	22m38.494s
user	9m46.120s
sys	0m52.270s

	But does not get much worse 
	 for 5
	real	22m34.139s
user	11m0.850s
sys	0m55.210s



	* i128-p128-er32.yaml (id): Trying with this one. It could take
	longer, but let's try anyways. Two clients: 
real	18m5.840s
user	6m24.460s
sys	0m36.430s
Second one, 4 clients.
	real	18m21.971s
user	6m9.440s
sys	0m35.500s

	6 clients
	
	real	21m48.571s
user	7m7.990s
sys	0m38.130s

	Hum, not good...


	* i256-p128-e64-r64.yaml (id): Starting a new set of experiments
	with the same packet size and increasing number of clients, and
	restarting database at the beginning of each set of experiments. 

	2 clients
	real	18m11.561s
user	4m57.320s
sys	0m27.870s

	4 clients
	real	21m33.087s
user	5m45.210s
sys	0m31.280s

	Similar, but we'll have to see why is that.
	And finally, 6 clients
	real	26m6.280s
user	6m39.130s
sys	0m35.820s

	This is definitely not working. Problem might be it reaches the
	"population" before it has any chance to reproduce, making it too
	greedy. Or since the population is too small, they are generating
	lots of conflicts. Let's try with a smaller packet size.

2012-01-08  Juan J. Merelo Guervós  <jjmerelo@gmail.com>

	* reproduce-pop-loop-until-found.pl: Testing now with new
	non-buggy version. 3 minutes, on average.

	* run-until-found-prof.sh: Now checking with profilers to identify
	bottlenecks. 
	Computing evaluations in reproduce (which was needed only for
	statistics was one of the bottlenecks).

	* run-until-found.sh: Tested without the checks for non-chromosome
	docs (solution and iterations). It improves a bit, from 3 minutes
	to 
	real	2m44.697s
user	0m17.300s
sys	0m1.990s

(single iteratio, but still...)
	Now checking without parsing to Float in fitness view. For some
	reason, fitness stringified in one iteration which made me add it.

	Without the "parseFloat", result is pretty much the same
	real	2m56.050s
user	0m18.730s
sys	0m2.180s

	But now it's difficult to say, because teh number of chromosomes
	could have been different.
	* ../js/rev/views/rev1/map.js: Taking "ifs" of to avoid (big)
	decrease in speed. 

2012-01-07  Juan J. Merelo Guervós  <jjmerelo@gmail.com>

	* run-until-found-par-repro.sh: Trying again with parallel
	reproducer to start, due to high amount of "sleeps" in the single
	evaluator. 
	A small improvement over the other:
	real	26m11.944s
user	3m1.330s
sys	0m18.630s

	Should be expected, since the only thing done is to improve
	"Sleep" periods for evaluators.

	* i128-p128-er100.yaml (reaper_delay): Repeating experiments with
	new method to find whether the solution has been found or not. It
	failed before, evaluators kept running until a solution was found.

	* run-until-found-par-all.sh: 
	real	12m15.566s
user	2m11.740s
sys	0m13.830s

	Big improvement with parallel evaluation. TEsting parallel both.

	* run-until-found-par-eval.sh: Second run, after fixing errors,
	worse results: 
	real	19m27.256s
user	2m43.240s
sys	0m16.150s

	Well, user is much smaller, but wall clock is what counts...

	* run-until-found.sh: First run with p128, blocksize 100 results:
	real	17m52.632s
user	7m37.530s
sys	0m49.720s

	Several bug fixes on the fly, one of them made reaper not delay
	after none was eliminated. 

2011-11-26  Juan J. Merelo Guervós  <jjmerelo@gmail.com>

	* Running again experiments, I made a msitake and put two
	reproducers (which were mainly hungry) instead of two
	evaluators. Took less time, but obtained a max fitness of 90 or
	so. 

	* evaluate-pop-loop.pl: Changed evaluate to start with rand(), to
	avoid problems. 

	* base.yaml (base_population): Setting base population to 128 for
	the first set of experiments.

