2012-01-08  Juan J. Merelo Guervós  <jjmerelo@gmail.com>

	* reproduce-pop-loop-until-found.pl: Testing now with new
	non-buggy version. 3 minutes, on average.

	* run-until-found-prof.sh: Now checking with profilers to identify
	bottlenecks. 
	Computing evaluations in reproduce (which was needed only for
	statistics was one of the bottlenecks).

	* run-until-found.sh: Tested without the checks for non-chromosome
	docs (solution and iterations). It improves a bit, from 3 minutes
	to 
	real	2m44.697s
user	0m17.300s
sys	0m1.990s

(single iteratio, but still...)
	Now checking without parsing to Float in fitness view. For some
	reason, fitness stringified in one iteration which made me add it.

	Without the "parseFloat", result is pretty much the same
	real	2m56.050s
user	0m18.730s
sys	0m2.180s

	But now it's difficult to say, because teh number of chromosomes
	could have been different.
	* ../js/rev/views/rev1/map.js: Taking "ifs" of to avoid (big)
	decrease in speed. 

2012-01-07  Juan J. Merelo Guervós  <jjmerelo@gmail.com>

	* run-until-found-par-repro.sh: Trying again with parallel
	reproducer to start, due to high amount of "sleeps" in the single
	evaluator. 
	A small improvement over the other:
	real	26m11.944s
user	3m1.330s
sys	0m18.630s

	Should be expected, since the only thing done is to improve
	"Sleep" periods for evaluators.

	* i128-p128-er100.yaml (reaper_delay): Repeating experiments with
	new method to find whether the solution has been found or not. It
	failed before, evaluators kept running until a solution was found.

	* run-until-found-par-all.sh: 
	real	12m15.566s
user	2m11.740s
sys	0m13.830s

	Big improvement with parallel evaluation. TEsting parallel both.

	* run-until-found-par-eval.sh: Second run, after fixing errors,
	worse results: 
	real	19m27.256s
user	2m43.240s
sys	0m16.150s

	Well, user is much smaller, but wall clock is what counts...

	* run-until-found.sh: First run with p128, blocksize 100 results:
	real	17m52.632s
user	7m37.530s
sys	0m49.720s

	Several bug fixes on the fly, one of them made reaper not delay
	after none was eliminated. 

2011-11-26  Juan J. Merelo Guervós  <jjmerelo@gmail.com>

	* Running again experiments, I made a msitake and put two
	reproducers (which were mainly hungry) instead of two
	evaluators. Took less time, but obtained a max fitness of 90 or
	so. 

	* evaluate-pop-loop.pl: Changed evaluate to start with rand(), to
	avoid problems. 

	* base.yaml (base_population): Setting base population to 128 for
	the first set of experiments.

