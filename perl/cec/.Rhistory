times.p64.er32 <- read.table('p64-e32-r32/times-p64-e32-r32.csv')
times.p64.er32
times.p128.p64.r32 <- read.table('p128-e64-r32/times-p128-e64-r32.csv')
times.p128.p64.r64 <- read.table('p128-e64-r64/times-p128-e64-r64.csv')
times.df <- data.frame(params=c(rep(10,'p128-p64-r32'), rep(10,'p128-p64-r64'), rep(10,'64-p32-r32')), times=c(times.p128.p64.r32$V1,times.p128.p64.r64$V1, times.p64.er32$V1))
times.df <- data.frame(params=c(rep(10,'p128-p64-r32'), rep(10,'p128-p64-r64'), rep(10,'64-p32-r32')), t=c(times.p128.p64.r32$V1,times.p128.p64.r64$V1, times.p64.er32$V1))
c(times.p128.p64.r32$V1,times.p128.p64.r64$V1, times.p64.er32$V1)
times.p128.p64.r32
times.p128.p64.r64
rep (10,'kk')
times.df <- data.frame(params=c(rep('p128-p64-r32',10), rep('p128-p64-r64',10), rep('64-p32-r32',10)), t=c(times.p128.p64.r32$V1,times.p128.p64.r64$V1, times.p64.er32$V1))
boxplot(times.df)
boxplot(times.df$t ~ timer.df$params)
boxplot(times.df$t ~ times.df$params)
quit()
times.p128.p64.r32.e32 <- read.table('p128-e32-r32/times-p128-e32-r32.csv')
times.df <- data.frame(params=c(rep('p128-p64-r32',10), rep('p128-p64-r64',10), rep('64-p32-r32',10),rep('128-p32-r32',10)), t=c(times.p128.p64.r32$V1,times.p128.p64.r64$V1, times.p64.er32$V1, times.p128.p64.r32.e32$V1))
boxplot(times.df$t ~ times.df$params)
quit()
evals.p128.r32.e32 <- read.table('p128-e32-r32/evals-p128-e32-r32.csv')
evals.p128.r64.e32 <- read.table('p128-e64-r32/evals-p128-e64-r32.csv')
evals.p128.r64.e64 <- read.table('p128-e64-r64/evals-p128-e64-r64.csv')
evals.p64.r32.e32 <- read.table('p64-e32-r32/evals-p64-e32-r32.csv')
evals.p64.r32.e32 <- read.table('p64-e32-r32/evals-p64-e32-e32.csv')
evals.df <- data.frame(params=c(rep('p128-p64-r32',10), rep('p128-p64-r64',10), rep('64-p32-r32',10),rep('128-p32-r32',10)), t=c(evals.p128.p64.r32$V1,evals.p128.p64.r64$V1, evals.p64.e32.r32$V1, evals.p128.r32.e32$V1))
evals.df <- data.frame(params=c(rep('p128-p64-r32',10), rep('p128-p64-r64',10), rep('64-p32-r32',10),rep('128-p32-r32',10)), t=c(evals.p128.p64.r32$V1,evals.p128.e64.r64$V1, evals.p64.e32.r32$V1, evals.p128.r32.e32$V1))
evals.df <- data.frame(params=c(rep('p128-p64-r32',10), rep('p128-p64-r64',10), rep('64-p32-r32',10),rep('128-p32-r32',10)), t=c(evals.p128.e64.r32$V1,evals.p128.e64.r64$V1, evals.p64.e32.r32$V1, evals.p128.r32.e32$V1))
evals.df <- data.frame(params=c(rep('p128-e64-r32',10), rep('p128-e64-r64',10), rep('p64-e32-r32',10),rep('p128-e32-r32',10)), t=c(evals.p128.e64.r32$V1,evals.p128.e64.r64$V1, evals.p64.e32.r32$V1, evals.p128.r32.e32$V1))
evals.df <- data.frame(params=c(rep('p128-e64-r32',10), rep('p128-e64-r64',10), rep('p64-e32-r32',10),rep('p128-e32-r32',10)), t=c(evals.p128.r64.e32$V1,evals.p128.r64.e64$V1, evals.p64.r32.e32$V1, evals.p128.r32.e32$V1))
boxplot(evals.df$t ~ evals.df$params)
png('evals.png')
boxplot(evals.df$t ~ evals.df$params)
dev.off()
png('times.png')
boxplot(times.df$t ~ times.df$params)
dev.off()
quit()
times.df <- data.frame(params=c(rep('p128-p64-r32',10), rep('p128-p64-r64',10), rep('p64-p32-r32',10),rep('p128-p32-r32',10)), t=c(times.p128.p64.r32$V1,times.p128.p64.r64$V1, times.p64.er32$V1, times.p128.p64.r32.e32$V1))
boxplot(times.df$t ~ times.df$params)
times.df <- data.frame(params=c(rep('p128-e64-r32',10), rep('p128-e64-r64',10), rep('p64-e32-r32',10),rep('p128-e32-r32',10)), t=c(times.p128.p64.r32$V1,times.p128.p64.r64$V1, times.p64.er32$V1, times.p128.p64.r32.e32$V1))
boxplot(times.df$t ~ times.df$params)
boxplot(times.df$t ~ times.df$params, xlab='Configuration', ylab='Time (s)', main='Running time, MaxOnes')
png('times-param.png', width='800', height='800')
png('times-param.png', width=800, height=800)
boxplot(times.df$t ~ times.df$params, xlab='Configuration', ylab='Time (s)', main='Running time, MaxOnes')
dev.off()
boxplot(evals.df$t ~ evals.df$params, xlab='Configuration', ylab='Evaluations', main='Number of evaluations', sub='MaxOnes')
png('evals-param.png', width=800, height=800)
boxplot(evals.df$t ~ evals.df$params, xlab='Configuration', ylab='Evaluations', main='Number of evaluations', sub='MaxOnes')
dev.off()
quit()
summary(evals.p128.r64.e32$V1)
summary(evals.p64.r32.e32$V1)
summary(evals.p128.r64.e64$V1)
summary(evals.p128.r32.e32$V1)
summary(time.p128.r32.e32$V1)
summary(times.p64.er32)
summary(times.p64.er32$V1)
summary(times.p128.p64.r64$V1)
summary(times.p128.p64.r32$V1)
summary(times.p128.p32.r32$V1)
summary(times.p128.e32.r32$V1)
summary(times.p128.er32$V1)
summary(times.p128.p64.r32.e32)
quit()
quit()
source('evals-er16.R')
source('evals-er16.R')
source('evals-er16.R')
evals.i128.p128.er16.eval2.repro1 <- read.table('evals-i128-p128-er16-eval2-repro1.dat')
source('evals-er16.R')
source('evals-er16.R')
source('evals-er16.R')
source('evals-er16.R')
source('evals-er16.R')
png('evals-er16.png', width=800, height=800)
source('evals-er16.R')
dev.off()
source('time-er16.R')
time.i128.p128.er16.eval6.repro2
time.i128.p128.er16.eval8.repro2
source('time-er16.R')
png('time-er16.png', width=800, height=800)
source('time-er16.R')
dev.off()
quit()
source('time-er16.R')
source('time-er16.R')
source('time-er16.R')
source('evals-er16.R')
wilcox.test(time.i128.p128.er16.eval2.repro1$V1, time.i128.p128.er16.eval2.repro1.id1$V1, paired=T)
source('evals-er16.R')
source('evals-er16.R')
source('evals-er16.R')
source('time-er16.R')
source('time-er16.R')
source('time-er16.R')
wilcox.test(time.i128.p128.er16.eval2.repro1$V1, time.i128.p128.er16.eval2.repro1.id1$V1, paired=T)
wilcox.test(evals.i128.p128.er16.eval2.repro1$V1, evals.i128.p128.er16.eval2.repro1.id1$V1, paired=T)
source('evals-er16.R')
t.test(evals.i128.p128.er16.eval2.repro1$V1, evals.i128.p128.er16.eval2.repro1.id1$V1, paired=T)
quit()
evals.i128.p128.er16.eval2.repro1.id1.good <- read.table('evals-i128-p128-er16-eval2-repro1-id1-good.dat')
time.i128.p128.er16.eval2.repro1.id1.good <- read.table('time-i128-p128-er16-eval2-repro1-id1-good.dat')
t.test(evals.i128.p128.er16.eval2.repro1$V1, evals.i128.p128.er16.eval2.repro1.id1.good$V1, paired=T)
t.test(evals.i128.p128.er16.eval2.repro1.id1$V1, evals.i128.p128.er16.eval2.repro1.id1.good$V1, paired=T)
wilcox.test(evals.i128.p128.er16.eval2.repro1$V1, evals.i128.p128.er16.eval2.repro1.id1$V1, paired=T)
wilcox.test(evals.i128.p128.er16.eval2.repro1$V1, evals.i128.p128.er16.eval2.repro1.id1.good$V1, paired=T)
wilcox.test(evals.i128.p128.er16.eval2.repro1.id1$V1, evals.i128.p128.er16.eval2.repro1.id1.good$V1, paired=T)
ls
ls()
times.p64.er32$V1
times.p64.er32$V1.length
length(times.p64.er32$V1)
source('sleeps-er16.R')
source('sleeps-er16.R')
source('sleeps-er16.R')
source('sleeps-er16.R')
png('sleeps-er16.png', width=800, height=800)
source('sleeps-er16.R')
dev.off()
source('conflicts-er16.R')
source('conflicts-er16.R')
png('conflicts-er16.png', width=800, height=800)
source('conflicts-er16.R')
dev.off()
summary(time.i128.p128.er16.eval1.repro1$V1);
summary(time.i128.p128.er16.eval2.repro1$V1);
summary(time.i128.p128.er16.eval6.repro2$V1);
summary(time.i128.p128.er16.eval4.repro1$V1);
summary(time.i128.p128.er16.eval8.repro2$V1);
quit()
ls
ls()
wilcox.test(evals.p128.r32.e32$V1, evals.p128.r64.e32 , paired=T)
wilcox.test(evals.p128.r32.e32$V1, evals.p128.r64.e32$V1 , paired=T)
wilcox.test(evals.p128.r32.e32$V1, evals.p128.r64.e64$V1 , paired=T)
wilcox.test(evals.p128.r64.e32$V1, evals.p128.r64.e64$V1 , paired=T)
wilcox.test(evals.p128.r64.e32$V1, evals.p64.r32.e32 , paired=T)
wilcox.test(evals.p128.r64.e32$V1, evals.p64.r32.e32$V1 , paired=T)
pairwise.t.test(evals.p128.r64.e32$V1, evals.p64.r32.e32$V1 , paired=T)
pairwise.t.test(evals.p128.r64.e64$V1, evals.p64.r32.e32$V1 , paired=T)
wilcox.test(evals.p128.r64.e64$V1, evals.p64.r32.e32$V1 , paired=T)
wilcox.test(evals.p128.r32.e32$V1, evals.p64.r32.e32$V1 , paired=T)
wilcox.test(time.p128.r32.e32$V1, time.p64.r32.e32$V1 , paired=T)
wilcox.test(times.p128.r32.e32$V1, times.p64.r32.e32$V1 , paired=T)
wilcox.test(times.p128.r32.e32$V1, times.p128.p64.r32.e32$V1 , paired=T)
wilcox.test(times.p128.er32$V1, times.p128.p64.r32.e32$V1 , paired=T)
wilcox.test(times.p128.p64.r32.e32$V1, times.p128.p64.er32$V1 , paired=T)

wilcox.test(times.p128.p64.r64$V1, times.p128.p64.er32$V1 , paired=T)
wilcox.test(times.p128.p64.r64$V1, times.p64.er32$V1 , paired=T)
wilcox.test(times.p128.p64.r64$V1, times.p128.p64.r32$V1 , paired=T)
wilcox.test(times.p128.p64.r32.e32$V1, times.p128.p64.r32$V1 , paired=T)
quit()
