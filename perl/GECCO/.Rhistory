changes.ip128.e96.r48 <- read.csv('changes-ip128-e96-r48.csv', sep=',');
changes.ip128.e96.r48 
plot(changes.ip128.e96.r48$rev1)
lines(changes.ip128.e96.r48$rev1)
quit()
changes.ip128.e96.r48 <- read.csv('changes-ip128-e96-r48-s500.csv', sep=',');
quit()
changes.ip128.e96.r48 <- read.csv('changes-ip128-e96-r48-s500.csv', sep=',');
lines(changes.ip128.e96.r48$rev1)
plot(changes.ip128.e96.r48$rev1)
plot(changes.ip128.e96.r48$rev1,type='l')
changes.ip128.e96.r24 <- read.csv('changes-ip128-e96-r24.csv', sep=',');
changes.ip128.e96.r24 <- read.csv('ip128-e96-r24.csv', sep=',');
lines(changes.ip128.e96.r24$rev1, color='red')
plot(changes.ip128.e96.r48$rev1,type='l')
lines(changes.ip128.e96.r24$rev1, col='red')
changes.ip128.e96.r12 <- read.csv('ip128-e96-r12-s1k.csv', sep=',');
plot(changes.ip128.e96.r12$rev1,type='l')
changes.ip128.e96.r48 <- read.csv('changes-ip128-e96-r48-s1k.csv', sep=',');
plot(changes.ip128.e96.r48$rev1,col='red')
plot(changes.ip128.e96.r12$rev1,type='l')
lines(changes.ip128.e96.r48$rev1,col='red')
changes.ip128.e96.r24 <- read.csv('changes-ip128-e96-r24-s1k.csv', sep=',');
lines(changes.ip128.e96.r24$rev1,col='blue')
changes.ip128.e96.r24 <- read.csv('changes-ip128-e96-r24-s1k.csv', sep=',');
lines(changes.ip128.e96.r24$rev1,col='black')
rev1.ip128.e96.r48 <- read.csv('../changes-testrev.csv', sep=',');
plot(rev1.ip128.e96.r48$rev1,type='l')
plot(rev1.ip128.e96.r48$total,type='l')
rev1.ip128.e96.r24 <- read.csv('rev1-ip128-e96-r24-s1k.csv', sep=',');
lines(rev1.ip128.e96.r24$total,col='red')
lines(rev1.ip128.e96.r24$total,col='red')
plot(rev1.ip128.e96.r48$total,type='l',ylim=c(0,800))
lines(rev1.ip128.e96.r24$total,col='red')
plot(rev1.ip128.e96.r24$total,col='red')
rev1.ip128.e96.r24 <- read.csv('rev1-ip128-e96-r24-s1k.csv', sep=',');
rev1.ip128.e96.r12 <- read.csv('rev1-ip128-e96-r12-s1k.csv', sep=',');
plot(rev1.ip128.e96.r48$total,type='l',ylim=c(0,800))
lines(rev1.ip128.e96.r24$total,col='red')
lines(rev1.ip128.e96.r12$total,col='blue')
rev1.ip128.e96.r48.s100 <- read.csv('../changes-test-rev.csv');
plot(rev1.ip128.e96.r48.s100$total,type='l',ylim=c(0,800))
rev1.ip128.e96.r24.s100 <- read.csv('rev1-ip128-e96-r24-s100.csv')
rev1.ip128.e96.r12.s100 <- read.csv('rev1-ip128-e96-r12-s100.csv')
lines(rev1.ip128.e96.r24.s100$total,col='red')
lines(rev1.ip128.e96.r12.s100$total,col='blue')
plot(rev1.ip128.e96.r48.s100$total,type='l',ylim=c(0,900))
lines(rev1.ip128.e96.r12.s100$total,col='blue')
plot(rev1.ip128.e96.r48.s100$total,type='l',ylim=c(0,100))
lines(rev1.ip128.e96.r12.s100$total,col='blue')
plot(rev1.ip128.e96.r48.s100$total,type='l',ylim=c(0,1000))
lines(rev1.ip128.e96.r12.s100$total,col='blue')
lines(rev1.ip128.e96.r24.s100$total,col='red')
quit()
time.e96.r48.old <- read.table('time-ip128-e96-r48.dat' )
time.e96.r48.new <- read.table('time-ip128-e96-r48-new.dat' )
summary(time.e96.r48.new)
summary(time.e96.r48.old)
quit()
ls()
rev1.ip128.e96.r48.s100.new <- read.csv("rev1-ip128-e96-r48-s100-new.csv")
plot(rev1.ip128.e96.r48.s100$total,type='l',ylim=c(0,1000))
lines(rev1.ip128.e96.r48.s100.new$total,col='red')
quit()
source('plot-evals.R')
source('plot-evals.R')
source('plot-evals.R')
source('plot-evals.R')
source('plot-evals.R')
source('plot-times.R')
quit()
source('plot-times.R')
source('plot-evals.R')
quit()
source('plot-eval-all.R')
source('plot-eval-all.R')
quit()
evaluated.ip128.e48.r48.eval1.repro1 <- read.table('evaluated-ip128-e48-r48-eval1-repro1.dat')
plot(evaluated.ip128.e48.r48.eval1.repro1)
plot(evaluated.ip128.e48.r48.eval1.repro1$V1)
plot(evaluated.ip128.e48.r48.eval1.repro1$V1,type='l')
quit()
evaluated.ip128.e48.r48.eval2.repro2 <- read.table('evaluated-ip128-e48-r48-eval2-repro2.dat')
plot(evaluated.ip128.e48.r48.eval1.repro1$V1,type='l')
lines(evaluated.ip128.e48.r48.eval2.repro1$V2,col='red')
lines(evaluated.ip128.e48.r48.eval2.repro2$V1,col='red')
quit()
evaluated.ip128.r64.e1r1 <- read.table('evaluated-greedy-ip128-r64-eval1-repro1.dat')
evaluated.ip128.r64.e2r2 <- read.table('evaluated-greedy-ip128-r64-eval2-repro2.dat')
plot(evaluated.ip128.r64.e1r1$V1,type='l')
lines(evaluated.ip128.r64.e2r2$V1,col='red')
plot(evaluated.ip128.r64.e2r2$V1,col='red')
plot(evaluated.ip128.r64.e2r2$V1,col='red',type='l')
lines(evaluated.ip128.r64.e1r1$V1,col='blue')
plot(evaluated.ip128.r64.e2r2$V1,col='red',type='l',ylim=c(0,220))
lines(evaluated.ip128.r64.e1r1$V1,col='blue')
quit()
evaluated.ip128.r32.e2r2 <- read.table('evaluated-greedy-ip128-r32-eval2-repro2.dat')
evaluated.ip128.r64.e1r1 <- read.table('evaluated-greedy-ip128-r64-eval2-repro1.dat')
plot(evaluated.ip128.r64.e2r2$V1,col='red',type='l',ylim=c(0,220))
lines(evaluated.ip128.r64.e1r1$V1,col='blue')
evaluated.ip128.r64.e2r1 <- read.table('evaluated-greedy-ip128-r64-eval2-repro1.dat')
evaluated.ip128.r64.e1r1 <- read.table('evaluated-greedy-ip128-r64-eval1-repro1.dat')
lines(evaluated.ip128.r64.e1r1$V1,col='black')
lines(evaluated.ip128.r32.e2r2$V1,col='green')
quit()
sleeping.ip128.r64.e2r1 <- read.table('sleeping-greedy-ip128-r64-eval2-repro1.dat')
sleeping.ip128.r64.e1r1 <- read.table('sleeping-greedy-ip128-r64-eval1-repro1.dat')
summary(sleeping.ip128.r64.e2r1)
summary(sleeping.ip128.r64.e1r1)
quit()
evals.ip128.r64.e1r1 <- read.table('evals-greedy-ip128-r64-eval1-repro1.dat')
evals.ip128.r64.e2r2 <- read.table('evals-greedy-ip128-r64-eval2-repro2.dat')
quit()
evals.ip128.r64.e2r2 <- read.table('evals-greedy-ip128-r64-eval2-repro2.dat')
plot(evals.ip128.r64.e2r2$V1,col='red',type='l')
summary(evals.ip128.r64.e2r2$V1)
summary(evals.ip128.r64.e1r1$V1)
quit()
quit()
time.ip128.er64 <- read.table('time-ip128-er64.dat')
evals.ip128.er64 <- read.table('evals-ip128-er64.dat')
evals.i256.p128.er64 <- read.table('evals-i256-p128-er64.dat')
evals.i256.p128.er64 <- read.table('evals-i256-p128-er64.dat')
quit()
evals.i256.p128.er64 <- read.table('evals-i256-p128-er64.dat')
time.i256.p128.er64 <- read.table('time-i256-p128-er64.dat')
quit()
time.i256.p128.er64 <- read.table('time-i256-p128-er64.dat')
initialpop.compare.time <- data.frame(InitialPop=c(rep('256', length(time.i256.p128.er64$V1), rep('128', length(time.ip128.er64$V1)), Time=c(time.i256.p128.er64$V1,time.ip128.er64$V1))
)
)
'
)
)
)
'
source('ipop-compare.R')
source('ipop-compare.R')
c(rep("256", length(time.i256.p128.er64$V1)
)
)
source('ipop-compare.R')
boxplot( initialpop.compare.time$Time ~ initialpop.compare.time$InitialPop)
source('ipop-compare.R')
boxplot( initialpop.compare.evals$Evals ~ initialpop.compare.evals$InitialPop)
wilcox.test( time.ip128.er64$V1, time.i256.p128.er64$V1 )
wilcox.test( time.ip128.er64$V1, time.i256.p128.er64$V1, paired='T' )
time.ip128.er64$V1
time.i256.p128.er64$V1
t.test( time.ip128.er64$V1, time.i256.p128.er64$V1, paired='T' )
t.test( time.ip128.er64, time.i256.p128.er64, paired=T )
t.test( time.ip128.er64$V1, time.i256.p128.er64$V1, paired=T )
t.test( evals.ip128.er64$V1, evals.i256.p128.er64$V1, paired=T )
boxplot( initialpop.compare.evals$Evals ~ initialpop.compare.evals$InitialPop)
boxplot( initialpop.compare.time$Time ~ initialpop.compare.time$InitialPop)
quit()
boxplot( initialpop.compare.time$Time ~ initialpop.compare.time$InitialPop, main='Running time', xlab='Initial population', xlab='Time (s)')
boxplot( initialpop.compare.time$Time ~ initialpop.compare.time$InitialPop, main='Running time', xlab='Initial population', ylab='Time (s)')
png('initial-pop-comparison.png', width=800, height=800)
boxplot( initialpop.compare.time$Time ~ initialpop.compare.time$InitialPop, main='Running time', xlab='Initial population', ylab='Time (s)')
dev.off()
quit()
source('evals-repro.R')
boxplot( time.ip128$Time ~ time.ip128$Configuration)
source('evals-repro.R')
boxplot( time.ip128$Time ~ time.ip128$Configuration)
boxplot( evals.ip128$Time ~ evals.ip128$Configuration)
boxplot( evals.ip128$Evals ~ evals.ip128$Configuration)
boxplot( evals.ip128$Evals ~ evals.ip128$Configuration,main='Number of evaluations', sub='Constant population',xlab='Configuration',ylab='Evaluations')
png('evals-comparison.png', width=800, height=800)
dev.off()
boxplot( time.ip128$Time ~ time.ip128$Configuration, main='Running time', sub='Constant population',xlab='Configuration',ylab='Time(s)')
png('time-comparison.png', width=800, height=800)
boxplot( time.ip128$Time ~ time.ip128$Configuration, main='Running time', sub='Constant population',xlab='Configuration',ylab='Time(s)')
dev.off()
quit()
repro.conflicts.i256 <- read.table('repro-conflicts-i256-p128-er64.dat')
repro.conflicts.i128 <- read.table('repro-conflicts-ip128-er64.dat')
summary(repro.conflicts.i128)
summary(repro.conflicts.i256)
repro.conflicts.df <- data.frame(Initial.Pop = c(rep('256',10), rep('128',10)), Conflicts=c(repro.conflicts.i256$V1, repro.conflicts.i128$V1))
repro.conflicts.df
boxplot(repro.conflicts.df$Conflicts ~ repro.conflicts.df$Initial.Pop)
t.test(repro.conflicts.i128,repro.conflicts.i256, paired=T)
t.test(repro.conflicts.i128$V1,repro.conflicts.i256$V1, paired=T)
wilcox.test(repro.conflicts.i128$V1,repro.conflicts.i256$V1, paired=T)
quit()
repro.sleeps.i128 <- read.table('repro-sleeps-ip128-er64.dat')
repro.sleeps.i256 <- read.table('repro-sleeps-ip256-er64.dat')
repro.sleeps.i256 <- read.table('repro-sleeps-i256-p128-er64.dat')
quit()
repro.sleeps.i256 <- read.table('repro-sleeps-i256-p128-er64.dat')
repro.sleeps.i128 <- read.table('repro-sleeps-ip128-er64.dat')
quit()
repro.sleeps.i128 <- read.table('repro-sleeps-ip128-er64.dat')
summary(repro.sleeps.i128)
summary(repro.sleeps.i256)
quit()
eval.acc.i128 <- read.table('eval-acc-ip128-er64.dat')
eval.acc.i256 <- read.table('eval-acc-i256-p128-er64.dat')
plot(eval.acc.i128)
plot(eval.acc.i128,type='l')
plot(eval.acc.i128$V1,type='l')
quit()
eval.acc.i256 <- read.table('eval-acc-i256-p128-er64.dat')
eval.acc.i128 <- read.table('eval-acc-ip128-er64.dat')
plot(eval.acc.i128$V1,type='l')
eval.acc.i128
quit()
eval.acc.i128 <- read.table('eval-acc-ip128-er64.dat')
eval.acc.i256 <- read.table('eval-acc-i256-p128-er64.dat')
eval.acc.i128
eval.acc.i256
plot(eval.acc.i128$V1,type='l')
plot(eval.acc.i128,type='l')
plot(eval.acc.i128$V1 ~ eval.acc.i128$V0,type='l')
plot(eval.acc.i128,type='l')
plot(eval.acc.i128$V1,type='l')
lines(eval.acc.i256$V1,col='red')
ls()
summary(evals.ip128.er64)
summary(evals.i256.p128.er64)
summary(timies.i256.p128.er64)
summary(time.i256.p128.er64)
summary(time.ip128.er64)
summary(repro.sleeps.i128)
summary(repro.sleeps.i256)
quit()
repro.pop.i256 <- read.table('repro-pop-i256-p128-er64.dat')
repro.pop.i128 <- read.table('repro-pop-ip128-er64.dat')
summary(repro.pop.i128)
summary(repro.pop.i256)
wilcox.test(repro.pop.i256,repro.pop.i128,paired=T)
wilcox.test(repro.pop.i256$V1,repro.pop.i128$V1,paired=T)
t.test(repro.pop.i256$V1,repro.pop.i128$V1,paired=T)
boxplot(repro.pop.i256$V1,repro.pop.i128$V1)
quit()
acc.pop.i128 <- read.table('repro-pop-acc-ip128-er64.dat')
acc.pop.i256 <- read.table('repro-pop-acc-i256-p128-er64.dat')
plot(acc.pop.i256,type='l')
plot(acc.pop.i256$V1,type='l')
lines(acc.pop.i128$V1,col='red')
plot(acc.pop.i256$V1,type='l')
plot(acc.pop.i256$V1,type='d')
plot(acc.pop.i256$V1,type='p')
plot(acc.pop.i256$V1,type='s')
steps(acc.pop.i128$V1,col='red'm)
steps(acc.pop.i128$V1,col='red')
help.start()
help(plot)
plot(acc.pop.i256$V1,type='s',lty='dashed')
plot(acc.pop.i256$V1,type='l',lty='dashed')
lines(acc.pop.i128$V1,col='red')
plot(acc.pop.i256$V1-acc.pop.i128$V1)
plot(acc.pop.i256$V1-acc.pop.i128$V1,type='l')
plot(acc.pop.i256$V1-acc.pop.i128$V1,type='l',xlim=c(0,length(acc.pop.i256$V1))
,ylim(-100,100))
plot(acc.pop.i256$V1-acc.pop.i128$V1,type='l',xlim=c(0,length(acc.pop.i128$V1)),ylim=c(-100,100))
plot(acc.pop.i256$V1-acc.pop.i128$V1,type='l',xlim=c(0,length(acc.pop.i128$V1)),ylim=c(-200,200))
plot(acc.pop.i256$V1-acc.pop.i128$V1,type='l',xlim=c(0,length(acc.pop.i128$V1)),ylim=c(-200,300))
plot(acc.pop.i256$V1-acc.pop.i128$V1,type='l',xlim=c(0,length(acc.pop.i128$V1)),ylim=c(-200,400))
plot(acc.pop.i256$V1,type='l',lty='dashed')
lines(acc.pop.i128$V1,col='red')
plot(acc.pop.i256$V1,type='l',lty='dashed',main='Accumulated population generated',xlab='Step',ylab='Number of individuals',sub='Different initial population')
lines(acc.pop.i128$V1,col='red')
png('acc-pop-comparison.png', width=800, height=800)
plot(acc.pop.i256$V1,type='l',lty='dashed',main='Accumulated population generated',xlab='Step',ylab='Number of individuals',sub='Different initial population')
lines(acc.pop.i128$V1,col='red')
dev.off()
quit()
ls()
repro.pop.i256/evals.i256.p128.er64
repro.pop.i128/evals.ip128.er64
summary(repro.pop.i128/evals.ip128.er64)
summary(repro.pop.i256/evals.i256.p128.er64)
repro.pop.i256
repro.pop.i128
t.test(repro.pop.i256/evals.i256.p128.er64, repro.pop.i128/evals.ip128.er64,paired=T )
t.test(repro.pop.i256$V1/evals.i256.p128.er64$V1, repro.pop.i128$V1/evals.ip128.er64$V1,paired=T )
wilcox.test(repro.pop.i256$V1/evals.i256.p128.er64$V1, repro.pop.i128$V1/evals.ip128.er64$V1,paired=T )
wilcox.test(time.ip128.e16.r64,time.ip128.er64,paired=T )
wilcox.test(time.ip128.e16.r64$V1,time.ip128.er64$V1,paired=T )
t.test(time.ip128.e16.r64$V1,time.ip128.er64$V1,paired=T )
t.test(time.ip128.e16.r64$V1,time.ip128.e64.r32$V1,paired=T )
wilcox.test(time.ip128.e16.r64$V1,time.ip128.e64.r32$V1,paired=T )
time.ip128.e64.r32
wilcox.test(time.ip128.e64.r16$V1,time.ip128.e64.r32$V1,paired=T )
time.ip128.e64.r16$V1
wilcox.test(time.ip128.er64$V1,time.ip128.e64.r32$V1,paired=T )
wilcox.test(time.ip128.er64$V1,time.ip128.e32.r64$V1,paired=T )
wilcox.test(evals.ip128.er64$V1,evals.ip128.e32.r64$V1,paired=T )
wilcox.test(evals.ip128.er64$V1,evals.ip128.e16.r64$V1,paired=T )
t.test(evals.ip128.er64$V1,evals.ip128.e32.r64$V1,paired=T )
t.test(evals.ip128.e16.r64$V1,evals.ip128.e32.r64$V1,paired=T )
summary(evals.ip128.er64$V1)
summary(time.ip128.er64$V1)
summary(time.ip128.e16.r64$V1)
summary(evals.ip128.e16.r64$V1)
summary(evals.ip128.e64.r16$V1)
summary(time.ip128.e64.r16$V1)
quit()
ls("*new*"
)
ls
ls()
boxplot( times.ip128.e96.r24.eval1.repro2, times.ip128.e96.r24.eval1.repro2.new, times.ip128.e96.r48.eval1.repro1, times.ip128.e96.r48.eval1.repro1.new)
boxplot( times.ip128.e96.r24.eval1.repro2, times.ip128.e96.r24.eval1.repro2.new)
boxplot( times.ip128.e96.r24.eval1.repro2$V1, times.ip128.e96.r24.eval1.repro2.new$V1, times.ip128.e96.r48.eval1.repro1$V1, times.ip128.e96.r48.eval1.repro1.new$V1)
boxplot( evals.ip128.e96.r24.eval1.repro2$V1, evals.ip128.e96.r24.eval1.repro2.new$V1, evals.ip128.e96.r48.eval1.repro1$V1, evals.ip128.e96.r48.eval1.repro1.new$V1)
quit()
erate.e24 <- read.table('eval-rate-ip128-e24-r48.dat')
erate.e48 <- read.table('eval-rate-ip128-e48-r48.dat')
erate.e96 <- read.table('eval-rate-ip128-e96-r48.dat')
boxplot(erate.e24$V1, erate.e48$V1, erate.e96$V1)
boxplot(erate.e24$V1, erate.e48$V1, erate.e96$V1,ylab='Percentage of block size actually retrieved', xlab='Evaluation block size', main='Theoretical vs. actual block size')
boxplot(erate.e24$V1, erate.e48$V1, erate.e96$V1,ylab='Percentage of block size actually retrieved', xlab='Evaluation block size', main='Theoretical vs. actual block size',xaxt='n')
axis(3,labels=c('24','48','96'))
axis(3,at=z,labels=c('24','48','96'))
axis(3,at=c(1,2,3),labels=c('24','48','96'))
axis(1,at=c(1,2,3),labels=c('24','48','96'))
boxplot(erate.e24$V1, erate.e48$V1, erate.e96$V1,ylab='Percentage of block size actually retrieved', xlab='Evaluation block size', main='Theoretical vs. actual block size',xaxt='n')
axis(1,at=c(1,2,3),labels=c('24','48','96'))
png('block-size.png', width=800, height=800)
boxplot(erate.e24$V1, erate.e48$V1, erate.e96$V1,ylab='Percentage of block size actually retrieved', xlab='Evaluation block size', main='Theoretical vs. actual block size',xaxt='n')
axis(1,at=c(1,2,3),labels=c('24','48','96'))
dev.off()
quit()
boxplot( evals.ip128.e96.r24.eval1.repro2$V1, evals.ip128.e96.r24.eval1.repro2.new$V1, evals.ip128.e96.r48.eval1.repro1$V1, evals.ip128.e96.r48.eval1.repro1.new$V1)
boxplot( times.ip128.e96.r24.eval1.repro2$V1, times.ip128.e96.r24.eval1.repro2.new$V1, times.ip128.e96.r48.eval1.repro1$V1, times.ip128.e96.r48.eval1.repro1.new$V1)
boxplot( times.ip128.e96.r24.eval1.repro2$V1, times.ip128.e96.r24.eval1.repro2.new$V1, times.ip128.e96.r48.eval1.repro1$V1, times.ip128.e96.r48.eval1.repro1.new$V1)
boxplot( times.ip128.e96.r24.eval1.repro2$V1, times.ip128.e96.r24.eval1.repro2.new$V1, times.ip128.e96.r48.eval1.repro1$V1, times.ip128.e96.r48.eval1.repro1.new$V1,xaxt='n')
axis(1,at=c(1:4),labels=c('Pre E96R24','E96R24','Pre E96r48','E96F48'))
axis(1,at=c(1:4),labels=c('Pre E96R24','E96R24','Pre E96r48','E96r48'))
axis(1,at=c(1:4),labels=c('Pre E96R24','E96R24','Pre E96r48','E96R48'))
png('rnd-adjustment.png', width=800, height=800)
boxplot( times.ip128.e96.r24.eval1.repro2$V1, times.ip128.e96.r24.eval1.repro2.new$V1, times.ip128.e96.r48.eval1.repro1$V1, times.ip128.e96.r48.eval1.repro1.new$V1,xaxt='n',xlab='Configuration',ylab='Running time (s)',main='Running time, database partitioning')
axis(1,at=c(1:4),labels=c('Pre E96R24','E96R24','Pre E96R48','E96R48'))
dev.off()
quit()
summary( times.ip128.e96.r24.eval1.repro2$V1)
summary( times.ip128.e96.r24.eval1.repro2.new$V1)
52/73
summary( evals.ip128.e96.r24.eval1.repro2.new$V1)
summary( evals.ip128.e96.r24.eval1.repro2$V1)
9088/12180
quit()
conflicts.e96 <- read.table('conflicts-e96-r48.dat')
conflicts.e96.new <- read.table('conflicts-e96-r48-new.dat')
boxplot( conflicts.e96, conflicts.e96.new  )
boxplot( conflicts.e96$V1, conflicts.e96.new$V1  )
t.text( conflicts.e96$V1, conflicts.e96.new$V1, paired=T)
boxplot( conflicts.e96$V1, conflicts.e96.new$V1,main='Reproduction conflicts' sub='Different random ranges', xlab='Configuration', ylab='# conflicts', xaxt='n'  )
boxplot( conflicts.e96$V1, conflicts.e96.new$V1,main='Reproduction conflicts', sub='Different random ranges', xlab='Configuration', ylab='# conflicts', xaxt='n'  )
axis(1,at=c(1:2),labels=c('Full range','Block-size dependent range'))
png('rnd-range-conflicts.png')
boxplot( conflicts.e96$V1, conflicts.e96.new$V1,main='Reproduction conflicts', sub='Different random ranges', xlab='Configuration', ylab='# conflicts', xaxt='n'  )
axis(1,at=c(1:2),labels=c('Full range','Block-size dependent range'))
dev.off()
quit()
eval.rate.e96.new <- read.table('eval-rate-ip128-e96-r48-new.dat')
eval.rate.e96 <- read.table('eval-rate-ip128-e96-r48.dat')
boxplot(eval.rate.e96.new, eval.rate.e96 )
(eval.rate.e96.new$V1, eval.rate.e96$V1 )
quit()
summary( conflicts.e96$V1)
summary( conflicts.e96.new$V1)
summary( eval.rate.e96.new)
summary( eval.rate.e96)
quit()
ls()
quit()
time.greedy.r64 <- read.table('time-ip128-r64-greedy.dat')
evals.greedy.r64 <- read.table('evals-ip128-r64-greedy.dat')
summary(evals.greedy.r64)
summary(time.greedy.r64)
summary(evals.ip128.e96.r48.eval1.repro1.new)
summary(time.ip128.e96.r48.eval1.repro1.new)
summary(times.ip128.e96.r48.eval1.repro1.new)
t.test(times.ip128.e96.r48.eval1.repro1.new, time.greedy.r64)
wilcox.test(times.ip128.e96.r48.eval1.repro1.new, time.greedy.r64)
wilcox.test(times.ip128.e96.r48.eval1.repro1.new$V1, time.greedy.r64$V1,paired=T)
t.test(times.ip128.e96.r48.eval1.repro1.new$V1, time.greedy.r64$V1,paired=T)
boxplot(times.ip128.e96.r48.eval1.repro1.new$V1, time.greedy.r64$V1)
boxplot(evals.ip128.e96.r48.eval1.repro1.new$V1, evals.greedy.r64$V1)
summary(evals.greedy.r64)
sd(evals.greedy.r64)
sd(time.greedy.r64)
summary(time.greedy.r64)
summary(times.ip128.e96.r48.eval1.repro1.new)
sd(times.ip128.e96.r48.eval1.repro1.new)
sd(evals.ip128.e96.r48.eval1.repro1.new)
summary(evals.ip128.e96.r48.eval1.repro1.new)
quit()
quit()
quit()
